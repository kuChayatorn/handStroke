/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/hand.glb 
*/

import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import * as THREE from 'three'

export function Hand(props) {
  const { scene } = useGLTF('/hand.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  console.log(nodes.leapmotion_basehand_mesh.skeleton)

  // useEffect(() => {
  //   const skeleton = nodes.leapmotion_basehand_mesh.skeleton

  //   // Example: Rotate each finger's bone
  //   const rotateBone = (boneName, x, y, z) => {
  //     const bone = skeleton.bones.find(b => b.name === boneName)
  //     if (bone) {
  //       bone.rotation.x = THREE.MathUtils.degToRad(x)
  //       bone.rotation.y = THREE.MathUtils.degToRad(y)
  //       bone.rotation.z = THREE.MathUtils.degToRad(z)
  //     }
  //   }

  //   // Example of rotating bones for fingers
  //   rotateBone('Bone002', 20, 0, 0)  // Rotating first bone of finger 1
  //   rotateBone('Bone005', -30, 0, 0)  // Rotating second bone of finger 1
  //   rotateBone('Bone004', -20, 0.0, 0.0)  // Rotating third bone of finger 1

  //   // You can repeat this for all the bones in each finger
  //   // rotateBone('finger2_bone1', 20, 0, 0)
  //   // etc.

  // }, [nodes])

  const applyHandTracking = (trackingData) => {
    const skeleton = nodes.leapmotion_basehand_mesh.skeleton

    // Utility to rotate a bone by name
    const rotateBone = (boneName, x, y, z) => {
      const bone = skeleton.bones.find(b => b.name === boneName)
      if (bone) {
        bone.rotation.set(
          THREE.MathUtils.degToRad(x),
          THREE.MathUtils.degToRad(y),
          THREE.MathUtils.degToRad(z)
        )
      }
    }
    // Example mapping based on tracking data, where trackingData is provided by your hand tracking system
    // You will need to map each joint from your hand tracking data
    rotateBone('Bone004', trackingData.thumb.x, trackingData.thumb.y, trackingData.thumb.z)  // Thumb
    rotateBone('Bone009', trackingData.index.x, trackingData.index.y, trackingData.index.z)  // Index
    rotateBone('Bone013', trackingData.middle.x, trackingData.middle.y, trackingData.middle.z) // Middle
    rotateBone('Bone017', trackingData.ring.x, trackingData.ring.y, trackingData.ring.z) // Ring
    rotateBone('Bone021', trackingData.pinky.x, trackingData.pinky.y, trackingData.pinky.z) // Pinky
  }

  useEffect(() => {
    const mockTrackingData = {
      thumb: { x: 1, y: 0, z: 0 },
      index: { x: 30, y: 0, z: 0 },
      middle: { x: 15, y: 0, z: 0 },
      ring: { x: 25, y: 0, z: 0 },
      pinky: { x: 35, y: 0, z: 0 }
    }

    applyHandTracking(mockTrackingData)
  }, [nodes])

  return (
    <group {...props} dispose={null}>
      <group position={[-0.191, 0.388, -0.028]}>
        <primitive object={nodes.arm} />
        <skinnedMesh geometry={nodes.leapmotion_basehand_mesh.geometry} material={materials['blinn3.003']} skeleton={nodes.leapmotion_basehand_mesh.skeleton} />
      </group>
    </group>
  )
}

useGLTF.preload('/hand.glb')
